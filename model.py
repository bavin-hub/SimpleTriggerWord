# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oKUu705zlyVKhxkFoLdUkg_rS4vKO7Ly
"""

from google.colab import drive, files
drive.mount("/content/drive")

!pip install librosa

# Commented out IPython magic to ensure Python compatibility.
import librosa, librosa.display

from IPython.display import Audio, display

import numpy as np
import os
import matplotlib.pyplot as plt
import random
# %matplotlib inline

import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from tensorflow import keras
from tensorflow.keras.layers import Input, Dense, Activation, LSTM, Dropout
from tensorflow.keras.models import load_model, Model

n_class = 2

tst = np.array([-7.2339496e+02,  7.5625694e+01,  2.1989738e+01,  2.5171732e+01,
   2.1158185e+00  ,1.2623917e+01  ,2.3005142e+00 ,-3.0925339e-02,
  -4.3465061e+00 ,-2.9992545e+00 ,-1.5718731e+00  ,1.4156642e+00,
   8.6106464e-02 ,-1.1984774e+00  ,3.0303149e+00 ,-2.1726818e+00,
   1.1306446e+00 ,-1.4080145e+00 ,-2.6935027e+00 ,-2.5139365e-01,
  -3.8264968e+00 ,-2.5028183e+00 ,-2.0261948e+00 ,-3.2507317e+00,
  -1.9931607e+00 ,-2.2971575e+00 ,-1.1450651e+00 ,-9.1626680e-01,
  -1.8951080e+00 ,-1.4481169e+00 ,-5.5694699e-01 ,-2.2212365e+00,
  -2.1676366e+00 ,-7.0643073e-01 ,-1.7512453e+00 ,-5.5872214e-01,
  -6.1759597e-01 ,-6.4598554e-01 ,-3.1723297e-01, -9.4357109e-01]).reshape(40,1)

tst.shape

array_path = "/content/drive/MyDrive/explorer_main/final_trigger_word/preprocessed_data"
x_train = np.load(f"{array_path}/x_train.npy")
y_train = np.load(f"{array_path}/y_train.npy")
y_train = to_categorical(y_train)


x_valid = np.load(f"{array_path}/x_valid.npy")
y_valid = np.load(f"{array_path}/y_valid.npy")
y_valid = to_categorical(y_valid)

print("shape of x_train is : {}".format(x_train.shape))
print("shape of y_train is : {}".format(y_train.shape))
print("shape of x_valid is : {}".format(x_valid.shape))
print("shape of y_valid is : {}".format(y_valid.shape))

def model(input_shape):
  inputs = Input(shape=input_shape)
  # x = LSTM(units=16, activation="tanh")(inputs)
  x = Dense(128, activation="relu")(inputs)
  x = Dropout(rate=0.4)(x)
  x = Dense(64, activation="relu")(x)
  x = Dropout(rate=0.3)(x)
  out = Dense(2, activation="sigmoid")(x)

  model = Model(inputs=inputs, outputs=out)
  return model

trigger_word = model(x_train.shape[1])

trigger_word.summary()

trigger_word.compile(
    loss="categorical_crossentropy",
    optimizer="adam",
    metrics=['accuracy']
)

trigger_word.fit(x_train, y_train, batch_size=32, epochs=20)

logits = trigger_word.evaluate(x_valid, to_categorical(y_valid))
print(logits)

















